name: PiWind Integration

on:
  push:
    branches:
      - master
      - develop
      - backports**
  pull_request:
    branches:
      - master
      - develop
      - backports**

env:
  pre_release: 'false'  # look for pre-release when testing last released platform version

jobs:
  build_images:
    uses: ./.github/workflows/build-docker.yml
    secrets: inherit
    with:
      docker_push: true
      ignore_unfixed: true
      cve_severity: 'SKIP'

  setup:
    runs-on: ubuntu-latest
    needs: [build_images]
    outputs:
      release_tag: ${{ steps.released_images.outputs.prev_release_tag }}
      build_server_img: ${{ steps.built_images.outputs.server_img }}
      build_server_tag: ${{ steps.built_images.outputs.server_tag }}
      build_worker_img: ${{ steps.built_images.outputs.worker_img }}
      build_worker_tag: ${{ steps.built_images.outputs.worker_tag }}

    steps:
      - name: Checkout Platform
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load released image tag
        id: released_images
        run: |
          tag=$( ./scripts/find_release.sh -p "${{ env.pre_release }}")
          echo "prev_release_tag=$tag" >> $GITHUB_OUTPUT

      # Split ouput strings from build job
      - name: Load built images
        id: built_images
        run: |
          server_img=$(echo ${{ needs.build_images.outputs.server_image }} | awk '{split($0,a,":"); print a[1];}')
          server_tag=$(echo ${{ needs.build_images.outputs.server_image }} | awk '{split($0,a,":"); print a[2];}')
          echo "server_img=$server_img" >> $GITHUB_OUTPUT
          echo "server_tag=$server_tag" >> $GITHUB_OUTPUT

          worker_img=$(echo ${{ needs.build_images.outputs.worker_image }} | awk '{split($0,a,":"); print a[1];}')
          worker_tag=$(echo ${{ needs.build_images.outputs.worker_image }} | awk '{split($0,a,":"); print a[2];}')
          echo "worker_img=$worker_img" >> $GITHUB_OUTPUT
          echo "worker_tag=$worker_tag" >> $GITHUB_OUTPUT



  storage_s3:
    if: ${{ ! failure() || ! cancelled() }}
    secrets: inherit
    needs: [setup]
    uses: OasisLMF/OasisPiWind/.github/workflows/integration.yml@hotfix/add-local-stack-compose
    with:
      #piwind_branch: ${{ github.event_name != 'workflow_dispatch' && 'develop' || inputs.piwind_branch }}
      piwind_branch: 'hotfix/add-local-stack-compose'
      server_image: ${{ needs.setup.outputs.build_server_img }}
      server_tag: ${{ needs.setup.outputs.build_server_tag }}
      worker_image: ${{ needs.setup.outputs.build_worker_img }}
      worker_tag: ${{ needs.setup.outputs.build_worker_tag }}
      debug_mode: 1
      pytest_opts: '--docker-compose=./docker/s3.docker-compose.yml -k case_1 -s'
      storage_suffix: '-s3'

  server_compatibility:
    if: ${{ ! failure() || ! cancelled() }}
    secrets: inherit
    #needs: [setup]
    needs: [storage_s3]
    uses: OasisLMF/OasisPiWind/.github/workflows/integration.yml@hotfix/add-local-stack-compose
    with:
      #piwind_branch: ${{ github.event_name != 'workflow_dispatch' && 'develop' || inputs.piwind_branch }}
      piwind_branch: 'hotfix/add-local-stack-compose'
      server_image: ${{ needs.setup.outputs.build_server_img }}
      server_tag: ${{ needs.setup.outputs.build_server_tag }}
      worker_image: 'coreoasis/api_server'
      worker_tag: ${{ needs.setup.outputs.release_tag }}
      debug_mode: 1
      pytest_opts: '-k case_1 -s'
      storage_suffix: '-server-compatibility'

  worker_compatibility:
    if: ${{ ! failure() || ! cancelled() }}
    secrets: inherit
    needs: [server_compatibility]
    uses: OasisLMF/OasisPiWind/.github/workflows/integration.yml@hotfix/add-local-stack-compose
    with:
      #piwind_branch: ${{ github.event_name != 'workflow_dispatch' && 'develop' || inputs.piwind_branch }}
      piwind_branch: 'hotfix/add-local-stack-compose'
      server_image: 'coreoasis/api_server'
      server_tag: ${{ needs.setup.outputs.release_tag }}
      worker_image: ${{ needs.setup.outputs.build_worker_img }}
      worker_tag: ${{ needs.setup.outputs.build_worker_tag }}
      debug_mode: 1
      pytest_opts: '-k case_1 -s'
      storage_suffix: '-worker-compatibility'

#  integration:
#    if: ${{ ! failure() || ! cancelled() }}
#    secrets: inherit
#    needs: [setup_matix]
#    strategy:
#      matrix:
#        #compose_test: [storage_fs, storage_s3, worker_compat, server_compat]
#        compose_test: [storage_s3]
#        include:
#        - compose_test: storage_s3
#          server_img: ${{ needs.setup.outputs.build_server_img }}
#          server_tag: ${{ needs.setup.outputs.build_server_tag }}
#          worker_img: ${{ needs.setup.outputs.build_worker_img }}
#          worker_tag: ${{ needs.setup.outputs.build_worker_tag }}
#          pytest_opts: '--docker-compose=./docker/s3.docker-compose.yml -k ControlSet'
#          debug: 1
#
#        #- compose_test: storage_fs
#        #  server_img: ${{ needs.setup.outputs.build_server_img }}
#        #  server_tag: ${{ needs.setup.outputs.build_server_tag }}
#        #  worker_img: ${{ needs.setup.outputs.build_worker_img }}
#        #  worker_tag: ${{ needs.setup.outputs.build_worker_tag }}
#        #  pytest_opts: '-k ControlSet'
#        #  debug: 1
#
#        #- compose_test: worker_compat # new_worker vs released_server
#        #  server_img: 'coreoasis/api_server'
#        #  server_tag: ${{ needs.setup.outputs.release_tag }}
#        #  worker_img: ${{ needs.setup.outputs.build_worker_img }}
#        #  worker_tag: ${{ needs.setup.outputs.build_worker_tag }}
#        #  pytest_opts: '-k ControlSet'
#        #  debug: 1
#
#        #- compose_test: server_compat # release_worker vs new_server
#        #  server_img: ${{ needs.setup.outputs.build_server_img }}
#        #  server_tag: ${{ needs.setup.outputs.build_server_tag }}
#        #  worker_img: 'coreoasis/model_worker'
#        #  worker_tag: ${{ needs.setup.outputs.release_tag }}
#        #  pytest_opts: '-k ControlSet'
#        #  debug: 1
#
#    #uses: OasisLMF/OasisPiWind/.github/workflows/integration.yml@master
#    uses: OasisLMF/OasisPiWind/.github/workflows/integration.yml@hotfix/add-local-stack-compose
#    with:
#      #piwind_branch: ${{ github.event_name != 'workflow_dispatch' && 'develop' || inputs.piwind_branch }}
#      piwind_branch: 'hotfix/add-local-stack-compose'
#      server_image: ${{ matrix.server_img }}
#      server_tag:   ${{ matrix.server_tag }}
#      worker_image: ${{ matrix.worker_img }}
#      worker_tag:   ${{ matrix.worker_tag }}
#      debug_mode:   ${{ matrix.debug }}
#      pytest_opts: ${{ matrix.pytest_opts }}
