name: Platform Build

on:
  push:
  workflow_dispatch:
    inputs:
      docker_push:
        description: 'Push the docker image to dockerhub and outout reference'
        required: true
        default: false
        type: boolean
      ignore_unfixed:
        description: 'Include unfixed vulnerabilities in scan [true,false]'
        required: true
        default: true
        type: boolean
      cve_severity:
        description: 'Severities of vulnerabilities to scanned for, [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL]'
        required: false
        default: 'CRITICAL,HIGH'

  workflow_call:
    inputs:
      docker_push:
        description: 'Push the docker image to dockerhub and outout reference'
        required: true
        default: 'false'
        type: string
      ignore_unfixed:
        description: 'Include unfixed vulnerabilities in scan [true,false]'
        required: true
        default: 'true'
        type: string
      cve_severity:
        description: 'Severities of vulnerabilities to scanned for, fails build if any found'
        required: false
        default: 'CRITICAL,HIGH'
        type: string

    outputs:
      server_image:
        description:
        value:  ${{ jobs.image_ref.outputs.server }}
      worker_image:
        description:
        value:  ${{ jobs.image_ref.outputs.worker }}
      worker_deb_image:
        description:
        value:  ${{ jobs.image_ref.outputs.worker_deb }}
        # https://purple.telstra.com/blog/github-action-test-matrices-part2
        # https://docs.github.com/en/actions/learn-github-actions/contexts


env:
  # inputs
  DOCKER_PUSH: 'false'
  IGNORE_UNFIXED: 'true'
  SEVERITY: 'CRITICAL,HIGH'

  # image name vars
  IMAGE_REPO: 'coreoasis/github-actions'
  IMAGE_TAG_SERVER: 'api_server-${{ github.sha }}'
  IMAGE_TAG_WORKER: 'model_worker-${{ github.sha }}'
  IMAGE_TAG_WORKER_DEB: 'model_worker-deb-${{ github.sha }}'

jobs:
  build:

    name: Docker build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [worker, worker_deb, server]
        include:

        - image: server
          tag: ${{ env.IMAGE_TAG_SERVER }}
          file: 'Dockerfile.api_server'
          report: 'server-scan.sarif'
          dive: 'server-layers.txt'
          #exit-code: '1'
          exit-code: '0' #TESTING

        - image: worker
          tag: ${{ env.IMAGE_TAG_WORKER }}
          file: 'Dockerfile.model_worker'
          report: 'worker-scan.sarif'
          dive: 'worker-layers.txt'
          #exit-code: '1'
          exit-code: '0' #TESTING

        - image: worker_deb
          tag: ${{ env.IMAGE_TAG_WORKER_DEB }}
          file: 'Dockerfile.model_worker_debian'
          report: 'worker-deb-scan.sarif'
          dive: 'worker-deb--layers.txt'
          exit-code: '0' # scan but don't fail

    outputs:
      image: ${{ steps.docker_push.outputs.image }}

    steps:
    - name: Set inputs ${{ github.event_name }}
      if: github.event_name != 'push'
      run: |
        echo "SEVERITY=${{ inputs.cve_severity }}" >> $GITHUB_ENV
        echo "DOCKER_PUSH=${{ inputs.docker_push }}" >> $GITHUB_ENV
        echo "IGNORE_UNFIXED=${{ inputs.ignore_unfixed }}" >> $GITHUB_ENV

    - name: Github context
      run:   echo "$GITHUB_CONTEXT"
      shell: bash
      env:
       GITHUB_CONTEXT: ${{ toJson(github) }}

    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}

    - name: Docker Build ${{ matrix.image }}
      run: |
        echo "Build from Branch ${{ github.ref_name }}"
        docker build -f ${{ matrix.file }} --pull -t ${{ env.IMAGE_REPO }}:${{ matrix.tag }} .

    - name: Test image efficiency
      run: |
        ./scripts/imagesize.sh ${{ env.IMAGE_REPO }}:${{ matrix.tag }} ${{ matrix.dive }}
      env:
        DIVE_HIGHEST_USER_WASTED: '0.20'
        DIVE_HIGHEST_WASTED_BYTES: '50mb'
        DIVE_LOWSET_EFFICIENCY: '0.95'

    - name: Store image size report
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.dive }}
        path: ${{ matrix.dive }}
        retention-days: 3

    - name: Vulnerability scanner
      if: env.SEVERITY != ''
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_REPO }}:${{ matrix.tag }}
        format: 'sarif'
        output: ${{ matrix.report }}
        scan-type: 'image'
        exit-code: ${{ matrix.exit-code }}
        ignore-unfixed: ${{ env.IGNORE_UNFIXED }}
        severity: ${{ env.SEVERITY }}
        security-checks: 'vuln'

    - name: Upload scan results to Security tab
      if: ( success() || failure() ) && matrix.exit-code == '1'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file:  ${{ matrix.report }}

    - name: Store CVE report
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.report }}
        path: ${{ matrix.report }}
        retention-days: 3

    - name: Login to Docker Hub
      if: inputs.docker_push == 'true'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker push
      if: env.DOCKER_PUSH == 'true'
      run: |
        docker push ${{ env.IMAGE_REPO }}:${{ matrix.tag }}


  image_ref:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Image names
      id: image_builds
      run: |
        echo "server=${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG_SERVER }}" >> $GITHUB_OUTPUT
        echo "worker=${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG_WORKER }}" >> $GITHUB_OUTPUT
        echo "worker_deb=${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG_WORKER_DEB }}" >> $GITHUB_OUTPUT
