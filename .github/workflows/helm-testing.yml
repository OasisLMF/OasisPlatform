name: CI
on:
  pull_request:
jobs:
  minikube:
    runs-on: ubuntu-latest
    env:
      OASIS_MODEL_DATA_DIR: /shared-fs/PIWIND
    steps:
      - name: Clone OasisPiWind model data
        run: |
          git clone https://github.com/OasisLMF/OasisPiWind.git /tmp/piwind

      - name: Set OASIS_MODEL_DATA_DIR env
        run: echo "OASIS_MODEL_DATA_DIR=/tmp/piwind" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: Build Docker images
        run: |
          eval $(minikube docker-env)
          
          docker build -f Dockerfile.api_server -t coreoasis/api_server:dev .
          docker build -f Dockerfile.model_worker -t coreoasis/model_worker:dev .

          pushd kubernetes/worker-controller
              docker build -t coreoasis/worker_controller:dev .
          popd

      - name: Upload PiWind model data
        run: |
          ./kubernetes/scripts/k8s/upload_piwind_model_data.sh $OASIS_MODEL_DATA_DIR

      - name: Deploy Platform
        run: |
          if ! helm status platform > /dev/null 2>&1; then
              helm install platform oasis-platform
          else
              helm upgrade platform oasis-platform
          fi
        working-directory: kubernetes/charts

      - name: Deploy Models
        run: |
          if ! helm status models > /dev/null 2>&1; then
              helm install models oasis-models
          else
              helm upgrade models oasis-models
          fi
        working-directory: kubernetes/charts

      - name: Checkout PiWind
        uses: actions/checkout@v3
        with:
          repository: OasisLMF/OasisPiWind
          ref: main

      - name: Start Minikube Tunnel
        run: |
          nohup minikube tunnel > /dev/null 2>&1 &
          sleep 10

      - name: Get Minikube LoadBalancer IP
        run: |
          for i in {1..30}; do
            IP=$(kubectl get svc --template="{{range .items}}{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}{{end}}")
            if [[ -n "$IP" ]]; then
              echo "MINIKUBE_IP=$IP" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for LoadBalancer IP..."
            sleep 5
          done

      - name: Authenticate
        run: |
          TOKEN=$(curl -s -k -X POST https://$MINIKUBE_IP/api/access_token/ \
            -H "Host: ui.oasis.local" \
            -H "Content-Type: application/json" \
            -d '{"username": "admin", "password": "password"}' | jq -r '.access_token')

          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Create Portfolio
        run: |
          PORTFOLIO_ID=$(curl -s -k -X POST https://$MINIKUBE_IP/api/v1/portfolios/ \
            -H "Host: ui.oasis.local" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name": "PiWind Portfolio"}' | jq -r '.id')
          echo "PORTFOLIO_ID=$PORTFOLIO_ID" >> $GITHUB_ENV

      - name: Upload Locations File
        run: |
          curl -s -X POST https://$MINIKUBE_IP/api/v1/portfolios/$PORTFOLIO_ID/locations_file/ \
            -H "Host: ui.oasis.local" \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@tests/inputs/SourceLocOEDPiWind10.csv"

      - name: Create Model
        run: |
          MODEL_ID=$(curl -s -X POST https://$MINIKUBE_IP/api/v1/models/ \
            -H "Host: ui.oasis.local" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name": "piwind", "version": "1.0"}' | jq -r '.id')

          echo "MODEL_ID=$MODEL_ID" >> $GITHUB_ENV

      - name: Create Analysis
        run: |
          ANALYSIS_ID=$(curl -s -X POST https://$MINIKUBE_IP/api/v1/portfolios/$PORTFOLIO_ID/create_analysis/ \
            -H "Host: ui.oasis.local" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"model\": $MODEL_ID}" | jq -r '.id')

          echo "ANALYSIS_ID=$ANALYSIS_ID" >> $GITHUB_ENV

      - name: Upload Analysis Settings
        run: |
          curl -s -X POST https://$MINIKUBE_IP/api/v1/analyses/$ANALYSIS_ID/analysis_settings/ \
            -H "Host: ui.oasis.local" \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@analysis_settings.json"

      - name: Run Analysis
        run: |
          curl -s -X POST https://$MINIKUBE_IP/api/v1/analyses/$ANALYSIS_ID/run/ \
            -H "Host: ui.oasis.local" \
            -H "Authorization: Bearer $TOKEN"