name: CI
on:
  pull_request:
jobs:
  minikube:
    runs-on: ubuntu-latest
    env:
      OASIS_MODEL_DATA_DIR: /shared-fs/PIWIND
      ACTIONS_STEP_DEBUG: true
    steps:
      - name: Clone OasisPiWind model data
        run: |
          git clone https://github.com/OasisLMF/OasisPiWind.git /tmp/piwind

      - name: Set OASIS_MODEL_DATA_DIR env
        run: echo "OASIS_MODEL_DATA_DIR=/tmp/piwind" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: Build Docker images
        run: |
          eval $(minikube docker-env)

          docker build -f Dockerfile.api_server -t coreoasis/api_server:dev .
          docker build -f Dockerfile.model_worker -t coreoasis/model_worker:dev .

          pushd kubernetes/worker-controller
              docker build -t coreoasis/worker_controller:dev .
          popd

      - name: Upload PiWind model data
        run: |
          ./kubernetes/scripts/k8s/upload_piwind_model_data.sh $OASIS_MODEL_DATA_DIR

      - name: Deploy Platform
        run: |
          if ! helm status platform > /dev/null 2>&1; then
              helm install platform oasis-platform
          else
              helm upgrade platform oasis-platform
          fi
        working-directory: kubernetes/charts

      - name: Deploy Models
        run: |
          if ! helm status models > /dev/null 2>&1; then
              helm install models oasis-models
          else
              helm upgrade models oasis-models
          fi
        working-directory: kubernetes/charts

      - name: Checkout PiWind
        uses: actions/checkout@v3
        with:
          repository: OasisLMF/OasisPiWind
          ref: main
      - name: Start Minikube Tunnel
        run: |
          nohup minikube tunnel > /dev/null 2>&1 &
          sleep 10

      - name: Get Minikube LoadBalancer IP
        run: |
          for i in {1..5}; do
            IP=$(kubectl get svc --template="{{range .items}}{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}{{end}}")
            if [[ -n "$IP" ]]; then
              echo "MINIKUBE_IP=$IP" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for LoadBalancer IP..."
            sleep 5
          done

      - name: Setup ui.oasis.local
        run: |
          echo "$MINIKUBE_IP ui.oasis.local" | sudo tee -a /etc/hosts

      - name: Authenticate
        run: |
          delay=1
          for i in {1..8}; do
            delay=$((delay * 2))
            RESPONSE=$(curl -s -k -X POST https://ui.oasis.local/api/access_token/ \
              -H "Content-Type: application/json" \
              -d '{"username": "admin", "password": "password"}')

            if echo "$RESPONSE" | jq -e . > /dev/null 2>&1; then
              TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
              if [[ "$TOKEN" != "null" && -n "$TOKEN" ]]; then
                echo "TOKEN=$TOKEN" >> $GITHUB_ENV
                break
              fi
            fi
            sleep $delay
          done

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "Failed to retrieve a valid token after retries"
            exit 1
          fi

      - name: Worker setup
        run: |
          curl -s -k -X POST https://ui.oasis.local/api/v2/models/1/scaling_configuration/ \
            -H 'accept: application/json' \
            -H "authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d '{
            "scaling_strategy": "FIXED_WORKERS",
            "worker_count_fixed": 1,
            "worker_count_max": 1,
            "worker_count_min": 1,
            "chunks_per_worker": 4
          }'
          kubectl scale --replicas=1 deployment/worker-oasislmf-piwind-1-v1

      - name: Install OasisLMF
        run: pip install oasislmf

      - name: Run analysis
        run: |
          oasislmf api run \
          --server-login-json '{"username": "admin", "password": "password"}' \
          --server-version 'v1' \
          --server-url 'http://ui.oasis.local/api' \
          --model-id 1 \
          -a analysis_settings.json \
          -x tests/inputs/SourceLocOEDPiWind10.csv \
          -y tests/inputs/SourceAccOEDPiWind.csv \
          -i tests/inputs/SourceReinsInfoOEDPiWind.csv \
          -s tests/inputs/SourceReinsScopeOEDPiWind.csv

      - name: Create kube logs
        if: always()
        run: |
          OUTPUT_DIR="oasis-kubelogs"

          if [ -d "$OUTPUT_DIR" ]; then
              echo "Removing existing $OUTPUT_DIR directory..."
              rm -rf "$OUTPUT_DIR"
          fi

          echo "Creating $OUTPUT_DIR directory..."
          mkdir -p "$OUTPUT_DIR"

          echo "Getting list of pods..."
          kubectl get pods -o name > "$OUTPUT_DIR/pod-list.txt"
          echo "Saved pod list to $OUTPUT_DIR/pod-list.txt"


          while read -r pod_line; do
              pod_name=$(echo "$pod_line" | cut -d'/' -f2)
              pod_status=$(kubectl get "$pod_line" -o jsonpath='{.status.phase}')

              if [ "$pod_status" == "Running" ]; then
                  echo "Processing $pod_name..."

                  kubectl logs "$pod_line" > "$OUTPUT_DIR/${pod_name}.log"
                  echo "  Saved logs to $OUTPUT_DIR/${pod_name}.log"

                  kubectl describe "$pod_line" > "$OUTPUT_DIR/${pod_name}-details.log"
                  echo "  Saved details to $OUTPUT_DIR/${pod_name}-details.log"
              else
                  echo "Skipping $pod_name (Status: $pod_status)"
              fi
          done < "$OUTPUT_DIR/pod-list.txt"
          echo "All logs and details saved in $OUTPUT_DIR"


      - name: Store kube logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: minikube-logs${{ inputs.storage_suffix }}
          path: ./oasis-kubelogs
          retention-days: 3

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: piwind-output
          path: analysis_1_output.tar.gz
