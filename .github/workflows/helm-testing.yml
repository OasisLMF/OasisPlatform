name: CI
on:
  pull_request:
jobs:
  minikube:
    runs-on: ubuntu-latest
    env:
      OASIS_MODEL_DATA_DIR: /shared-fs/PIWIND
      ACTIONS_STEP_DEBUG: true
    steps:
      - name: Clone OasisPiWind model data
        run: |
          git clone https://github.com/OasisLMF/OasisPiWind.git /tmp/piwind

      - name: Set OASIS_MODEL_DATA_DIR env
        run: echo "OASIS_MODEL_DATA_DIR=/tmp/piwind" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Minikube
        uses: medyagh/setup-minikube@latest

      - name: Build Docker images
        run: |
          eval $(minikube docker-env)
          
          docker build -f Dockerfile.api_server -t coreoasis/api_server:dev .
          docker build -f Dockerfile.model_worker -t coreoasis/model_worker:dev .

          pushd kubernetes/worker-controller
              docker build -t coreoasis/worker_controller:dev .
          popd

      - name: Upload PiWind model data
        run: |
          ./kubernetes/scripts/k8s/upload_piwind_model_data.sh $OASIS_MODEL_DATA_DIR

      - name: Deploy Platform
        run: |
          if ! helm status platform > /dev/null 2>&1; then
              helm install platform oasis-platform
          else
              helm upgrade platform oasis-platform
          fi
        working-directory: kubernetes/charts

      - name: Deploy Models
        run: |
          if ! helm status models > /dev/null 2>&1; then
              helm install models oasis-models
          else
              helm upgrade models oasis-models
          fi
        working-directory: kubernetes/charts

      - name: Checkout PiWind
        uses: actions/checkout@v3
        with:
          repository: OasisLMF/OasisPiWind
          ref: main

      - name: Start Minikube Tunnel
        run: |
          nohup minikube tunnel > /dev/null 2>&1 &
          sleep 10

      - name: Get Minikube LoadBalancer IP
        run: |
          for i in {1..5}; do
            IP=$(kubectl get svc --template="{{range .items}}{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}{{end}}")
            if [[ -n "$IP" ]]; then
              echo "MINIKUBE_IP=$IP" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for LoadBalancer IP..."
            sleep 5
          done
        
      - name: Setup ui.oasis.local
        run: |
          echo "$MINIKUBE_IP ui.oasis.local" | sudo tee -a /etc/hosts

      - name: Authenticate
        run: |
          delay=1
          for i in {1..8}; do
            delay=$((delay * 2))
            RESPONSE=$(curl -s -k -X POST https://ui.oasis.local/api/access_token/ \
              -H "Content-Type: application/json" \
              -d '{"username": "admin", "password": "password"}')

            if echo "$RESPONSE" | jq -e . > /dev/null 2>&1; then
              TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
              if [[ "$TOKEN" != "null" && -n "$TOKEN" ]]; then
                echo "TOKEN=$TOKEN" >> $GITHUB_ENV
                break
              fi
            fi
            sleep $delay
          done

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "Failed to retrieve a valid token after retries"
            exit 1
          fi

      - name: Create Portfolio
        run: |
          PORTFOLIO_ID=$(curl -s -k -X POST  https://ui.oasis.local/api/v1/portfolios/ \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"name": "PiWind Portfolio"}' | jq -r '.id')
            echo "PORTFOLIO_ID=$PORTFOLIO_ID" >> $GITHUB_ENV

      - name: Upload Location File
        run: |
          curl -s -k -X POST  https://ui.oasis.local/api/v1/portfolios/$PORTFOLIO_ID/location_file/ \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@tests/inputs/SourceLocOEDPiWind10.csv;type=text/csv"

      - name: Upload Accounts File
        run: |
          curl -s -k -X POST  https://ui.oasis.local/api/v1/portfolios/$PORTFOLIO_ID/accounts_file/ \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@tests/inputs/SourceAccOEDPiWind.csv;type=text/csv"

      - name: Upload RI File
        run: |
          curl -s -k -X POST  https://ui.oasis.local/api/v1/portfolios/$PORTFOLIO_ID/reinsurance_info_file/ \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@tests/inputs/SourceReinsInfoOEDPiWind.csv;type=text/csv"

      - name: Upload RS File
        run: |
          curl -s -k -X POST  https://ui.oasis.local/api/v1/portfolios/$PORTFOLIO_ID/reinsurance_scope_file/ \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@tests/inputs/SourceReinsScopeOEDPiWind.csv;type=text/csv"

      - name: Create Analysis
        run: |
          ANALYSIS_ID=$(curl -s -k -X POST  https://ui.oasis.local/api/v1/portfolios/$PORTFOLIO_ID/create_analysis/ \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"model": 1, "name": 1}' | jq -r '.id')

          echo "ANALYSIS_ID=$ANALYSIS_ID" >> $GITHUB_ENV

      - name: Upload Analysis Settings
        run: |
          curl -s -k -X POST  https://ui.oasis.local/api/v1/analyses/$ANALYSIS_ID/settings_file/ \
            -H "Authorization: Bearer $TOKEN" \
            -F "file=@analysis_settings.json;type=application/json"

      - name: Setup worker
        run: |
          curl -s -k -X POST https://ui.oasis.local/api/v2/models/1/scaling_configuration/ \
            -H 'accept: application/json' \
            -H "authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d '{
            "scaling_strategy": "FIXED_WORKERS",
            "worker_count_fixed": 1,
            "worker_count_max": 1,
            "worker_count_min": 1,
            "chunks_per_worker": 4
          }'
          kubectl scale --replicas=1 deployment/worker-oasislmf-piwind-1-v1

      - name: Generate Inputs
        run: |
          curl -s -k -X POST 'https://ui.oasis.local/api/v1/analyses/$ANALYSIS_ID/generate_inputs/' \
            -H 'accept: application/json' \
            -H "authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d '{}'

      - name: Wait for input completion
        run: |
          delay=1
          for i in {1..5}; do
            delay=$((delay * 2))
            STATUS=$(curl -s -k -X GET https://ui.oasis.local/api/v1/analyses/$ANALYSIS_ID/ \
              -H 'accept: application/json' \
              -H "authorization: Bearer $TOKEN" | jq -r '.status')

            if [[ "$STATUS" == "INPUTS_GENERATION_ERROR" ]]; then
              exit 1
            elif [[ "$STATUS" == "READY" ]]; then
              break
            else
              sleep $delay
            fi
          done

          if [[ "$STATUS" != "READY" ]]; then
            exit 1
          fi

      - name: Run Analysis
        run: |
          curl -s -k -X POST  https://ui.oasis.local/api/v1/analyses/$ANALYSIS_ID/run/ \
            -H "Authorization: Bearer $TOKEN"

      - name: Wait for analysis completion
        run: |
          refresh_token() {
            TOKEN=$(curl -s -k -X POST https://ui.oasis.local/api/access_token/ \
              -H "Content-Type: application/json" \
              -d '{"username": "admin", "password": "password"}' | jq -r '.access_token')
            echo 'New token'
          }
          delay=5
          for i in {1..30}; do
            delay=$((delay * 2))
            if ((delay > 30)); then delay=30; fi
            RESPONSE=$(curl -s -k -X GET https://ui.oasis.local/api/v1/analyses/$ANALYSIS_ID/ \
              -H 'accept: application/json' \
              -H "authorization: Bearer $TOKEN")

            if ! echo "$RESPONSE" | jq empty 2>/dev/null; then
              echo "$RESPONSE"
              sleep $delay
              refresh_token
              continue
            fi

            if echo "$RESPONSE" | jq -e '.detail == "Token verification failed"' > /dev/null; then
              sleep $delay
              refresh_token
              continue
            fi

            STATUS=$(echo "$RESPONSE" | jq -r '.status')

            if [[ "$STATUS" == "RUN_ERROR" ]]; then
              exit 1
            elif [[ "$STATUS" == "RUN_COMPLETED" ]]; then
              break
            else
              sleep $delay
            fi
          done
          echo "$RESPONSE"
          if [[ "$STATUS" != "RUN_COMPLETED" ]]; then
            exit 1
          fi

      - name: Download Output File
        run: |
          curl -s -k -X GET "https://ui.oasis.local/api/v1/analyses/$ANALYSIS_ID/output_file/" \
            -H 'accept: application/json' \
            -H "authorization: Bearer $TOKEN" \
            -o output.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: piwind-output
          path: output.tar.gz
