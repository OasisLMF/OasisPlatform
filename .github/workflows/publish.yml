name: Platform Release


# GET prev tag 'git describe --tags --abbrev=0' when on matching branch
# master_tags=( $(git tag --merged master --sort=creatordate) )
# echo ${master_tags[-1]}     --->   1.23.14-lts (most recent tag on branch)
# echo ${master_tags[-2]}     --->   1.23.13-lts (prev release)

# With GREP filter for non-RC
# git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$"

# ISSUE with boolean inputs, see https://github.com/orgs/community/discussions/29796


on:
  push:
  workflow_dispatch:
    inputs:
      pre_release:
        description: 'Mark GitHub release as pre-release: [true, false]'
        required: true
        type: boolean

      release_tag:
        description: 'Release tag, for release: [{n}.{n}.{n}] e.g. 3.0.0,  for Pre-Release  [{n}.{n}.{n}rc{n}]'
        required: true

      prev_release_tag:
        description: '(OVERRIDE) The previous release version for changelog: ["{n}.{n}.{n}", "{n}.{n}.{n}rc{n}"]'
        required: false

      oasislmf_release:
        description: '(OVERRIDE) Pin a new "oasislmf" version: [{n}.{n}.{n}] e.g. 3.0.0,  for Pre-Release  [{n}.{n}.{n}rc{n}]'
        required: true

      oasislmf_release_prev:
        description: '(OVERRIDE)'
        required: false

      ktools_release:
        description: '(OVERRIDE)'
        required: false

      ktools_release_prev:
        description: '(OVERRIDE)'
        required: false


# TESTING
env:
  platform_version: '1.27.0rc21'
  oasislmf_version: '1.27.0rc3'

jobs:
  update:
    uses: ./.github/workflows/version.yml
    secrets: inherit
    with:
      #platform_version: ${{ inputs.release_tag }}
      #oasislmf_version: ${{ inputs.oasislmf_release }}
      platform_version: '1.27.0rc21'
      oasislmf_version: '1.27.0rc3'



# download artifact ref 'openapi-schema' to attach
  build_schema:
    uses: ./.github/workflows/build-schema.yml
    secrets: inherit
    needs: update

  build_images:
    uses: ./.github/workflows/build-docker.yml
    secrets: inherit
    needs: update
    with:
      docker_push: true
      ignore_unfixed: true

  build_piwind:
    uses: OasisLMF/OasisPiWind/.github/workflows/build.yml@dockerbuild/github-actions
    secrets: inherit
    needs: build_images
    with:
      docker_push: true
      from_image: ${{ needs.build_images.outputs.worker_image }}
      piwind_branch: 'develop'  # should change if backports


  release:
    runs-on: ubuntu-latest
    needs: [build_images, build_schema, build_piwind]
    outputs:
      heading: ${{ steps.slack_vars.outputs.heading }}
      title: ${{ steps.slack_vars.outputs.title }}
      build_branch: ${{ steps.slack_vars.outputs.branch }}
      run_url: ${{ steps.slack_vars.outputs.run_url }}
      run_id: ${{ steps.slack_vars.outputs.run_id }}
      run_status: ${{ steps.slack_vars.outputs.run_status }}
      run_date: ${{ steps.slack_vars.outputs.run_date }}

    # e.g.  working-directory: ${{ env.dir_ktools }}
    env:
      RELEASE_TAG: ${{ inputs.release_tag }}
      prev_release_tag: ${{ inputs.prev_release_tag }}
      oasislmf_release: ${{ inputs.oasislmf_release }}
      oasislmf_release_prev: ${{ inputs.oasislmf_release_prev }}
      ktools_release: ${{ inputs.ktools_release }}
      ktools_release_prev: ${{ inputs.ktools_release_prev }}

      dir_platform: ${{ github.workspace }}/platform
      dir_oasislmf: ${{ github.workspace }}/oasislmf
      dir_ktools: ${{ github.workspace }}/ktools
      #dir_oasisui:  ${{ github.workspace }}/oasisui

      branch_platform: ${{ github.ref_name }}
      branch_oasislmf: 'master'
      branch_ktools: 'master'
      #branch_oasisui: 'master'



    steps:
     ## RELEASE CHECKS
    - name: check branchname is valid for release
      if: ${{ !startsWith(github.ref_name , 'release/') && !startsWith(github.ref_name, 'backports/') }}
      run: |
        echo "Releases must be trigged on branchs 'release/x.x.x' or 'backports/x.x.x' "
        exit 1

    - name: Check tag is valid for release
      if: env.PRE_RELEASE == 'false'
      run: |
        VALID=$(echo ${{ env.RELEASE_TAG }} | grep -oPc "^(\d+)\.(\d+)\.(\d+)$")
        if [[ ! "$VALID" == 1 ]]; then
            echo "Release Tag ${{ env.RELEASE_TAG }} is not valid"
            exit 1
        fi

    - name: Check tag is valid for pre-release
      if: env.PRE_RELEASE == 'true'
      run: |
        VALID=$(echo ${{ env.RELEASE_TAG }} | grep -oPc "^(\d+)\.(\d+)\.(\d+)rc(\d+)$")
        if [[ ! "$VALID" == 1 ]]; then
            echo "Release Tag ${{ env.RELEASE_TAG }} is not valid"
            exit 1
        fi

    - name: set Oasislmf to backports
      if: startsWith(github.ref_name, 'backports/')
      run: echo "branch_oasislmf=${{ github.ref_name }}" >> $GITHUB_ENV

    ## CLONE REPOS (plat / oasislmf / ktools / UI)
    - name: Setup github user
      run: |
        git config --global user.email ${{ env.GIT_EMAIL }}
        git config --global user.name ${{ env.GIT_USERNAME }}
        git config --global pull.ff only
      env:
        GIT_EMAIL: ${{ secrets.BUILD_GIT_EMAIL }}
        GIT_USERNAME: ${{ secrets.BUILD_GIT_USERNAME }}

    - name: Checkout Platform
      uses: actions/checkout@v3
      with:
        path: ${{ env.dir_platform }}
        repository: Oasislmf/OasisPlatform
        ref: ${{ github.ref_name }}
        fetch-depth: 0

    - name: Checkout Oasislmf
      uses: actions/checkout@v3
      with:
        path: ${{ env.dir_oasislmf }}
        repository: Oasislmf/Oasislmf
        ref: ${{ github.ref_name }}
        fetch-depth: 0

    #- name: Checkout UI
    #  uses: actions/checkout@v3
    #  with:
    #    path: ${{ env.dir_platform }}
    #    repository: Oasislmf/OasisUI
    #    ref: master
    #    fetch-depth: 0

    - name: Checkout Ktools
      uses: actions/checkout@v3
      with:
        path: ${{ env.dir_platform }}
        repository: Oasislmf/ktools
        ref: master
        fetch-depth: 0



    # If overrides not set, auto-load the current / prev release for each repo
    - name: Find 'prev_release_tag'
      if: inputs.prev_release_tag == ''
      working-directory: ${{ env.dir_platform }}
      run: |
        if [[ "${{ env.PRE_RELEASE }}" = "false" ]]; then
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$") )
        else
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$|^(\d+)\.(\d+)\.(\d+)rc(\d+)") )
        fi
        echo "prev_release_tag=${release_tags[-1]}" >> $GITHUB_ENV

    - name: Find 'oasislmf_release'
      if: inputs.oasislmf_release == ''
      working-directory: ${{ env.dir_oasislmf }}
      run: |
        if [[ "${{ env.PRE_RELEASE }}" = "false" ]]; then
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$") )
        else
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$|^(\d+)\.(\d+)\.(\d+)rc(\d+)") )
        fi
        echo "oasislmf_release=${release_tags[-1]}" >> $GITHUB_ENV

    - name: Find 'oasislmf_release_prev'
      if: inputs.oasislmf_release_prev == ''
      working-directory: ${{ env.dir_oasislmf }}
      run: |
        if [[ "${{ env.PRE_RELEASE }}" = "false" ]]; then
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$") )
        else
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$|^(\d+)\.(\d+)\.(\d+)rc(\d+)") )
        fi
        echo "oasislmf_release_prev=${release_tags[-2]}" >> $GITHUB_ENV


    - name: Find 'ktools_release'
      if: inputs.ktools_release == ''
      working-directory: ${{ env.dir_ktools }}
      run: |
        if [[ "${{ env.PRE_RELEASE }}" = "false" ]]; then
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$") )
        else
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$|^(\d+)\.(\d+)\.(\d+)rc(\d+)") )
        fi
        echo "ktools_release=${release_tags[-1]}" >> $GITHUB_ENV

    - name: Find 'ktools_release_prev'
      if: inputs.ktools_release_prev == ''
      working-directory: ${{ env.dir_ktools }}
      run: |
        if [[ "${{ env.PRE_RELEASE }}" = "false" ]]; then
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$") )
        else
            release_tags=( $(git tag --merged backports/1.26.x --sort=creatordate | grep -oP "^(\d+)\.(\d+)\.(\d+)$|^(\d+)\.(\d+)\.(\d+)rc(\d+)") )
        fi
        echo "ktools_release_prev=${release_tags[-2]}" >> $GITHUB_ENV

    ## TAG & assests

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Pull and re-tag images
      run: |
        # Server
        docker pull ${{ needs.build_images.outputs.server_image }}
        docker tag  ${{ needs.build_images.outputs.server_image }} coreoasis/api_server:${{ env.RELEASE_TAG }}
        docker tag  ${{ needs.build_images.outputs.server_image }} coreoasis/api_server:latest
        # Worker
        docker pull ${{ needs.build_images.outputs.worker_image }}
        docker tag  ${{ needs.build_images.outputs.worker_image }} coreoasis/model_worker:${{ env.RELEASE_TAG }}
        docker tag  ${{ needs.build_images.outputs.worker_image }} coreoasis/model_worker:latest
        # Worker-dev
        docker pull ${{ needs.build_images.outputs.worker_deb_image }}
        docker tag  ${{ needs.build_images.outputs.worker_deb_image }} coreoasis/model_worker:${{ env.RELEASE_TAG }}-debian
        # Worker-PiWind
        docker pull ${{ needs.build_piwind.outputs.piwind_image }}
        docker tag  ${{ needs.build_piwind.outputs.piwind_image }} coreoasis/piwind_worker:${{ env.RELEASE_TAG }}
        docker tag  ${{ needs.build_piwind.outputs.piwind_image }} coreoasis/piwind_worker:latest



    - name: Check tag matches (Repo)
      working-directory: ${{ env.dir_platform }}
      run: |
        BUILD_VER=$(cat VERSION)
        [[ "${{ env.RELEASE_TAG }}" = "$BUILD_VER" ]] && ERROR_CODE=0 || ERROR_CODE=1
        if [[ "$ERROR_CODE" == 1 ]]; then
            echo "BUILD_VER: $BUILD_VER stored in Repo 'VERSION' dosn't match RELEASE_TAG: $RELEASE_VER" && exit $ERROR_CODE
        fi

    - name: Check tags matche (worker image)
      run: |
        container_id=$(docker create "${{ needs.build_images.outputs.worker_image }}")
        docker cp "$container_id:/home/worker/VERSION" "./IMAGE_WORKER_VERSION"
        docker rm "$container_id"

        BUILD_VER=$(cat ./IMAGE_WORKER_VERSION)
        RELEASE_VER=${{ env.RELEASE_TAG }}
        [[ "$RELEASE_VER" = "$BUILD_VER" ]] && ERROR_CODE=0 || ERROR_CODE=1
        if [[ "$ERROR_CODE" == 1 ]]; then
            echo "BUILD_VER: $BUILD_VER stored in image '${{ needs.build_images.outputs.worker_image }}' dosn't match RELEASE_TAG: $RELEASE_VER" && exit $ERROR_CODE
        fi

    - name: Check tags matche (piwind image)
      run: |
        container_id=$(docker create "${{ needs.build_piwind.outputs.piwind_image }}")
        docker cp "$container_id:/home/worker/VERSION" "./IMAGE_PIWIND_VERSION"
        docker rm "$container_id"

        BUILD_VER=$(cat ./IMAGE_PIWIND_VERSION)
        RELEASE_VER=${{ env.RELEASE_TAG }}
        [[ "$RELEASE_VER" = "$BUILD_VER" ]] && ERROR_CODE=0 || ERROR_CODE=1
        if [[ "$ERROR_CODE" == 1 ]]; then
            echo "BUILD_VER: $BUILD_VER stored in image '${{ needs.build_piwind.outputs.piwind_image }}' dosn't match RELEASE_TAG: $RELEASE_VER" && exit $ERROR_CODE
        fi

    - name: Get ktools & oasislmf versions
      continue-on-error: true
      run: |
        docker run --entrypoint "/root/.local/bin/eve" ${{ needs.build_images.outputs.worker_image }} '-v' 2> KTOOLS_VERSION
        docker run --entrypoint "/root/.local/bin/oasislmf" ${{ needs.build_images.outputs.worker_image }} 'version' > OASISLMF_VERSION


    - name: Check Oasislmf version matches
      run: |
        test "$(cat OASISLMF_VERSION)" != '${{ env.oasislmf_release }}' && \
        echo "$(cat OASISLMF_VERSION) != ${{ env.oasislmf_release }}"

    - name: Check ktools version matches
      run: |
        KTOOL_VER=$(head -1 KTOOLS_VERSION | grep -oP "(\d+)\.(\d+)\.(\d+)rc(\d+)|(\d+)\.(\d+)\.(\d+)")
        test "$KTOOL_VER" != ${{ env.ktools_release }} && \
        echo "$KTOOL_VER != ${{ env.ktools_release }}"

    ## setup github / login dockerhub

    ## pull a rename build images

    ## Create Changelog / notes

       # Append markdown release notes to Action run

    # --- Push Images --- #
    # --- Create Release --- #
    # --- Slack notify --- #
