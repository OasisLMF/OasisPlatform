# Chart default values. Override by passing --set or -f to helm.

# Images and versions used for all deployments
images:
  oasis:
    platform:
      image: coreoasis/api_server
      version: dev
      imagePullPolicy: Never
    ui:
      image: coreoasis/oasisui_app
      version: 1.11.6
    worker_controller:
      image: coreoasis/worker_controller
      version: dev
      imagePullPolicy: Never
  postgres:
    image: postgres
    version: 15.3-alpine3.18
  mysql:
    image: mysql
    version: 8.0.33
  keycloak:
    image: quay.io/keycloak/keycloak
    version: 22.0.0
  init:
    image: busybox
    version: 1.28
  redis:
    image: redis
    version: 7.0.11-alpine3.18
  rabbitmq:
    image: rabbitmq
    version: 3.11-management-alpine


# Chart default values. Override by passing --set or -f to helm.
modelImages:
  init:
    image: alpine
    version: 3.13.5

# Hostnames for Oasis UI, API, Prometheus, Alert manager and Grafana. If you change it, make sure you also
# update hostnames in oasis-monitoring values.yaml file. Read more about how in the README.md and how to
# reach your ingress.
#
# At the moment we need to keep the oasis API on a separate host since it can't coexist in the root with oasis
# ui. In the future we might be able to put them on the same if either oasis ui or oasis api supports subpaths.
ingress:

  # Certificate for TLS
  tls:
    # Strategies:
    # - default: A self-signed certificate will be generated
    # - provided: Use provided certificate stored in secret - requires secret name to be set
    # - letsencrypt: Use letsencrypt to retrieve a valid free certificate - requires email to be set
    strategy: 'default'

#    strategy: 'provided'
#    certificateSecret: oasis-ingress-tls

#    strategy: 'letsencrypt'
#    certificateSecret: oasis-ingress-tls
#    email: <email>
#    server: https://acme-v02.api.letsencrypt.org/directory
#    server: https://acme-staging-v02.api.letsencrypt.org/directory # Stage server

  # Hostname for Oasis UI, API, Prometheus, Alert manager and Grafana
  uiHostname: ui.oasis.local

# Generate all password secrets - get them by using kubectl:
# kubectl get secrets/oasis-server --template={{.data.password}} | base64 -d
generatePasswords: false

nameOverride: ""
fullnameOverride: ""

# Control how kubernetes deployed pods to nodes - this is applied to all pods managed by this chart
#affinity:
#  # Place all pods on nodes with label oasislmf/node-type set to either 'platform' or 'small'
#  nodeAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#      nodeSelectorTerms:
#        - matchExpressions:
#            - key: oasislmf/node-type
#              operator: In
#              values:
#                - platform
#                - small
#  # Do not schedule any pod on a node with a pod with label oasislmf/type set to 'worker'
#  podAntiAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#      - labelSelector:
#          matchExpressions:
#            - key: oasislmf/type
#              operator: In
#              values:
#                - worker
#        topologyKey: "kubernetes.io/hostname"

databases:
# db_name:
#   type: redis|postgres|mysql
#   name: name (used as deployment and service)
#   port: port (for service)
  channel_layer:
    type: redis
    name: channel-layer
    port: 6379
    ssl: false
  broker:
    type: rabbitmq
    name: broker
    port: 5672
    extraPort: 15672
    user: rabbit
    password: rabbit
  keycloak_db:
    type: postgres
    name: keycloak-db
    dbName: keycloak
    port: 5432
    volumeSize: 2Gi
    user: keycloak
    password: password
  celery_db:
    type: postgres
    name: celery-db
    dbName: celery
    port: 5432
    volumeSize: 2Gi
    user: celery
    password: password
  oasis_db:
    type: postgres
    name: server-db
    dbName: oasis
    port: 5432
    volumeSize: 2Gi
    user: oasis
    password: password

# Keycloak host, port and console admin credentials
keycloak:
  name: keycloak
  port: 8080
  # This is the keycloak admin account to manage the realm and all users
  user: keycloak
  password: password
  oasisRestApi:
    # These users will be created on the first deployment/installation but never updated. Use the keycloak admin
    # console to manage users.

    # The worker controller needs an account to listen to the web socket (queue)
    platformServiceAccount:
      username: platform-service-controller
      password: x7e+GK6Y8ac#grb&9vT4
    users:
      # A default user is created at first deployment.
      - username: admin
        password: password
        admin: true

# Oasis API host, port and credentials (for HTTP connections)
oasisServer:
  name: oasis-server
  port: 8000
  # Default django admin user - please note this is not a valid REST API user when Keyclock is enabled
  user: admin
  password: password

  # Enable OIDC Keycloak authentication with 'keycloak or set to 'simple' for simple jwt.
  apiAuthType: keycloak
  oidc:
    endpoint: https://ui.oasis.local/auth/realms/oasis/protocol/openid-connect/
    clientName: oasis-server
    clientSecret: e4f4fb25-2250-4210-a7d6-9b16c3d2ab77

  # Set environment variables for the Oasis API server.
  env:
    - name: OASIS_DEBUG
      value: "1"
    - name: OASIS_PORTFOLIO_UPLOAD_VALIDATION
      value: "1"

# Oasis API host, port and credentials (for Websocket connections)
oasisWebsocket:
  name: oasis-websocket
  port: 8001
  user: admin
  password: password

  # Use same settings as client (uncomment and update charts if needed)
  # Enable OIDC Keycloak authentication with 'keycloak or set to 'simple' for simple jwt.
  #apiAuthType: keycloak
  #oidc:
  #  #endpoint: https://ui.oasis.local/auth/realms/oasis/protocol/openid-connect/
  #  clientName: oasis-websocket
  #  clientSecret: 4fbf064d-de2a-4f58-b031-14486a751a3d


workerController:
  # The maximum number of workers the worker controller will start. No matter the number of analyses and models
  # this limit will never be exceeded by this worker controller.
  totalWorkerLimit: 10

  # Debug option - Read the auto scaling configuration from the API on every update
  # default is only to read it on for each model each time replicas is changed from 0 (first analysis running))
  continueUpdateScaling: true

  # Debug option - This prevents workers for a model set to FIXED_WORKERS to be scaled to 0. They will always be started.
  neverShutdownFixedWorkers: false

  # Settings related to prioritized runs
  priority:

    # When multiple runs has started with different prioritise the worker controller will by using this limit
    # focus on the 'parallelModelsLimit' models with the highest priority runs.
    modelsLimit: 2

oasisUI:
  name: oasis-ui
  port: 8080

# Enable if Azure Files are used to store the storage account name and key for access.
#azure:
#  storageAccounts:
#    oasisfs:
#      secretName: azure-oasisfs
#      accountName: account
#      accountKey: key
#  tenantId: "812eb12f-c995-45ef-bfea-eac7aeca0755"

# Volumes to mount and use within the platform
# Use either the host.sharedFs for host path or azureFiles.sharedFs to Azure files mount
volumes:
  # Placement of the shared filesystem on the kubernetes host node
  host:
    sharedFs:
      name: shared-fs
      storageCapacity: 2Gi
      hostPath: /data/shared-fs/
#  azureFiles:
#    sharedFs:
#      csi:
#        driver: file.csi.azure.com
#        volumeAttributes:
#          secretName: azure-secret
#          shareName: oasisfs
